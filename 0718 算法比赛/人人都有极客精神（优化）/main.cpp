#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>

using namespace std;

const unsigned char g_nDayTable[] = { 0, 8, 11, 11, 10, 11, 12, 9, 13, 12, 8, 4, 7, 7, 6, 7, 8, 5, 9, 8, 11, 7, 10, 10, 9, 10, 11, 8, 12, 11, 11, 7 };
const unsigned char g_nYearTable[] = { 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 24, 20, 23, 23, 22, 23, 24, 21, 25, 24, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 15, 11, 14, 14, 13, 14, 15, 12, 16, 15, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 17, 13, 16, 16, 15, 16, 17, 14, 18, 17, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 16, 12, 15, 15, 14, 15, 16, 13, 17, 16, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 17, 13, 16, 16, 15, 16, 17, 14, 18, 17, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 24, 20, 23, 23, 22, 23, 24, 21, 25, 24, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 16, 12, 15, 15, 14, 15, 16, 13, 17, 16, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 18, 14, 17, 17, 16, 17, 18, 15, 19, 18, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 17, 13, 16, 16, 15, 16, 17, 14, 18, 17, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 24, 20, 23, 23, 22, 23, 24, 21, 25, 24, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 24, 20, 23, 23, 22, 23, 24, 21, 25, 24, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 25, 21, 24, 24, 23, 24, 25, 22, 26, 25, 24, 20, 23, 23, 22, 23, 24, 21, 25, 24, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 19, 15, 18, 18, 17, 18, 19, 16, 20, 19, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 21, 17, 20, 20, 19, 20, 21, 18, 22, 21, 22, 18, 21, 21, 20, 21, 22, 19, 23, 22, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 20, 16, 19, 19, 18, 19, 20, 17, 21, 20, 24, 20, 23, 23, 22, 23, 24, 21, 25, 24, 23, 19, 22, 22, 21, 22, 23, 20, 24, 23, 23 };

class CMyDate
{
private:
	unsigned short m_nYear;
	unsigned char m_nMonth;
	unsigned char m_nDay;
	int m_nCnt;
	static const unsigned char s_nTable[];
public:
	CMyDate(int val)
		: m_nCnt(0)
	{
		m_nDay = val % 100;
		val = val / 100;
		m_nMonth = val % 100;
		val = val / 100;
		m_nYear = val;
	}
	~CMyDate()
	{

	}
	int GetCount() const
	{
		return m_nCnt;
	}
	int Count()
	{
		return g_nYearTable[m_nYear - 2000] + g_nDayTable[m_nMonth] + g_nDayTable[m_nDay];
	}
	int operator ++()
	{
		m_nCnt++;
		int nMonthDay = s_nTable[m_nMonth - 1] + (m_nMonth == 2 && ((m_nYear % 4 == 0 && m_nYear % 100 != 0) || (m_nYear % 400 == 0)) ? 1 : 0);
		if (++m_nDay > nMonthDay)
		{
			m_nDay = 1;
			if (++m_nMonth > 12)
			{
				m_nYear++;
				m_nMonth = 1;
			}
		}
		if (m_nYear == 3000)
		{
			m_nCnt = -1;
			return m_nCnt;
		}

		return Count();
	}
};

const unsigned char CMyDate::s_nTable[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

int main()
{
	int i, T, val, m;
	scanf("%d", &T);
	for (i = 0; i < T; i++)
	{
		int cnt;
		scanf("%d%d", &val, &m);
		CMyDate date(val);
		do
		{
			cnt = ++date;
		} while (cnt != m && cnt != -1);
		printf("%d\n", date.GetCount());
	}
	return 0;
}
